#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('myapp:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.:
 */

var server = http.createServer(app);
/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}


var users = {};
var io = require('socket.io').listen(server);
global.io = io;

io.sockets.on('connection', function (socket) {

  //有人上线
  socket.on('online', function (data) {
    //将上线的用户名存储为 socket 对象的属性，以区分每个 socket 对象，方便后面使用
    socket.name = data.user;
    //users 对象中不存在该用户名则插入该用户名
    if (!users[data.user]) {
      users[data.user] = data.user;
    }
    //向所有用户广播该用户上线信息
    io.sockets.emit('online', { users: users, user: data.user });
  });

  //有人发话
  socket.on('say', function (data) {
    if (data.to == 'all') {
      //向其他所有用户广播该用户发话信息
      socket.broadcast.emit('say', data);
    } else {
      //向特定用户发送该用户发话信息
      //clients 为存储所有连接对象的数组
      var clients_object = io.sockets.clients().connected;
      client_arr = Object.keys(clients_object).map(key => clients_object[key])
      client_arr.forEach(function (client) {
        if (client.name == data.to) {
          client.emit('say', data);
        }
      });
    }
  });

  //有人下线
  socket.on('disconnect', function () {
    //若 users 对象中保存了该用户名
    if (users[socket.name]) {
      //从 users 对象中删除该用户名
      delete users[socket.name];
      //向其他所有用户广播该用户下线信息
      socket.broadcast.emit('offline', { users: users, user: socket.name });
    }
  });

  //連線
  socket.on('pair_success', function (data) {
    let room_id = data.room_id;
    let pair_user_id = data.pair_user_id;
    if(true){
      socket.broadcast.emit('pair_success', { room_id: room_id, pair_user_id: pair_user_id });
    }
  });

  //完成設置
  socket.on('setting_finish', function (data) {
    let room_id = data.room_id;
    let pair_user_id = data.pair_user_id;
    if (true) {
      socket.broadcast.emit('setting_finish', { room_id: room_id, pair_user_id: pair_user_id });
    }
  });

  //開始遊戲1
  socket.on('start-game1', function (data) {
    let room_id = data.room_id;
    let pair_user_id = data.pair_user_id;
    if (true) {
      socket.broadcast.emit('start-game1', { room_id: room_id, pair_user_id: pair_user_id });
    }
  });

  //開始遊戲2
  socket.on('start-game2', function (data) {
    let room_id = data.room_id;
    let pair_user_id = data.pair_user_id;
    if (true) {
      socket.broadcast.emit('start-game2', { room_id: room_id, pair_user_id: pair_user_id });
    }
  });

  //出題目
  socket.on('created_question', function (data) {
    let room_id = data.room_id;
    let pair_user_id = data.pair_user_id;
    let question_no = data.question_no;
    if (true) {
      socket.broadcast.emit('created_question', { room_id: room_id, pair_user_id: pair_user_id, question_no: question_no});
    }
  });
});
